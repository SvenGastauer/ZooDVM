selectInput('svvar','Sv variable',names(Sv$data)),
hr()),
tabPanel('DVM settings',
sliderInput("Svrange", label = ("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',25),
radioButtons("updown", "Compute percentage from:",
c("Bottom" = "bottom",
"Surface" = "surface")),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3),
checkboxInput('freeze','Keep DVM',value = FALSE)),
tabPanel('Filter',
hr(),
h3('Running function'),
numericInput('xwin','Window size x',3),
numericInput('ywin','Window size y',3),
selectInput('func','Filter function',c('mean','median','max','min','sd','var')),
shiny::actionButton('addRun','Add'),
hr(),
h3('Anomality'),
selectInput('funcAn','Background FUnction', c('mean','median','max','min')),
radioButtons('rfscale','Scaled values', c('Normal','scaled')),
shiny::actionButton('addAn','Add'),
hr(),
textAreaInput("filterlist", "Filter list", "None"),
)
)),
mainPanel(
textInput("pathIn", "Path", "C:/Users/sven/Documents/Zonar/data/csv_zonar/"),#"Z:\\zonar_sven\\zonar\\data\\csv_zonar\\"),
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(session, input, output) {
#filter buttons
observeEvent(input$addRun, {
task = paste0("filter2d(Svval, x=",input$xwin,", y=",input$ywin,
", xval='Dive',yval='Depth_r', val='Sv', log=TRUE,fun='",input$func,"')")
if(input$filterlist %ni% c('None','') ){
task = paste(input$filterlist,task, sep=';\n')
}
updateTextAreaInput(session, "filterlist", value = task)
})
observeEvent(input$addAn, {
v=if(input$rfscale == 'Normal'){'SvAnomal'}else{'scaledAnomaly'}
task = paste0("anomaly(Svval, fun='",input$funcAn,"', replace=TRUE,v='", v,"')") #Svval$Sv = Svval[,'",v,"']")
if(input$filterlist %ni% c('None','') ){
task = paste(input$filterlist,task, sep=';\n')
}
updateTextAreaInput(session, "filterlist", value = task)
})
#process Sv
sv_proc <- reactive({
Sv = get_sv(input$pathIn,input$miss)
Svval = Sv$data[input$svvar][[1]]
if (input$filterlist %ni% c('None','') ){
funs = strsplit(input$filterlist,';\n')
for(f in funs[[1]]){
print(f)
Svval = eval(parse(text=f))
}
}
updateSliderInput(session, "Svrange", #value = c(floor(min(na.omit(Svval$Sv))),ceiling(max(na.omit(Svval$Sv)))),
min = floor(min(na.omit(Svval$Sv))),
max = ceiling(max(na.omit(Svval$Sv))),
step = 0.1)
return(list(Svval, Sv$gps))
})
#get dvm
dvm <- reactive({
if (input$freeze==FALSE){
Svval=sv_proc()[[1]]
dvm = pdvm(ac_group=Svval,
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend),
updown=input$updown)
}
return(list(dvm))
})
output$svplot <- renderPlot({
sv = sv_proc()
Sv = sv[[1]]
gps = sv[[2]]
if(input$freeze==FALSE){dvm = dvm()[[1]]}
#print(Sv[[1]])
p=plot_sv(Sv,gps,svmin=input$Svrange[1], svmax=input$Svrange[2], variable='Sv')
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvmdat = dvm()[[2]]
ggplot(data=dvmdat, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
})
}
dvm_app()
#' Shiny App to detect DVM
#' @param path Path to the ZOnar csv files
#' @return shiny app
#' @import shiny
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#' @examples
#' path='Z:/zonar_sven/zonar/data/csv_zonar'
#' dvm_app(path)
dvm_app <- function() {
'%ni%' <- Negate('%in%')
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Mission Settings",
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
hr()),
tabPanel('DVM settings',
sliderInput("Svrange", label = ("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',25),
radioButtons("updown", "Compute percentage from:",
c("Bottom" = "bottom",
"Surface" = "surface")),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3),
checkboxInput('freeze','Keep DVM',value = FALSE)),
tabPanel('Filter',
hr(),
h3('Running function'),
numericInput('xwin','Window size x',3),
numericInput('ywin','Window size y',3),
selectInput('func','Filter function',c('mean','median','max','min','sd','var')),
shiny::actionButton('addRun','Add'),
hr(),
h3('Anomality'),
selectInput('funcAn','Background FUnction', c('mean','median','max','min')),
radioButtons('rfscale','Scaled values', c('Normal','scaled')),
shiny::actionButton('addAn','Add'),
hr(),
textAreaInput("filterlist", "Filter list", "None"),
)
)),
mainPanel(
textInput("pathIn", "Path", "C:/Users/sven/Documents/Zonar/data/csv_zonar/"),#"Z:\\zonar_sven\\zonar\\data\\csv_zonar\\"),
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(session, input, output) {
#filter buttons
observeEvent(input$addRun, {
task = paste0("filter2d(Svval, x=",input$xwin,", y=",input$ywin,
", xval='Dive',yval='Depth_r', val='Sv', log=TRUE,fun='",input$func,"')")
if(input$filterlist %ni% c('None','') ){
task = paste(input$filterlist,task, sep=';\n')
}
updateTextAreaInput(session, "filterlist", value = task)
})
observeEvent(input$addAn, {
v=if(input$rfscale == 'Normal'){'SvAnomal'}else{'scaledAnomaly'}
task = paste0("anomaly(Svval, fun='",input$funcAn,"', replace=TRUE,v='", v,"')") #Svval$Sv = Svval[,'",v,"']")
if(input$filterlist %ni% c('None','') ){
task = paste(input$filterlist,task, sep=';\n')
}
updateTextAreaInput(session, "filterlist", value = task)
})
#process Sv
sv_proc <- reactive({
Sv = get_sv(input$pathIn,input$miss)
Svval = Sv$data[input$svvar][[1]]
if (input$filterlist %ni% c('None','') ){
funs = strsplit(input$filterlist,';\n')
for(f in funs[[1]]){
print(f)
Svval = eval(parse(text=f))
}
}
updateSliderInput(session, "Svrange", #value = c(floor(min(na.omit(Svval$Sv))),ceiling(max(na.omit(Svval$Sv)))),
min = floor(min(na.omit(Svval$Sv))),
max = ceiling(max(na.omit(Svval$Sv))),
step = 0.1)
return(list(Svval, Sv$gps))
})
#get dvm
dvm <- reactive({
if (input$freeze==FALSE){
Svval=sv_proc()[[1]]
dvm <<- pdvm(ac_group=Svval,
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend),
updown=input$updown)
}
return(list(dvm))
})
output$svplot <- renderPlot({
sv = sv_proc()
Sv = sv[[1]]
gps = sv[[2]]
if(input$freeze==FALSE){dvm = dvm}
#print(Sv[[1]])
p=plot_sv(Sv,gps,svmin=input$Svrange[1], svmax=input$Svrange[2], variable='Sv')
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvmdat = dvm
ggplot(data=dvmdat, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
})
}
dvm_app()
#' Shiny App to detect DVM
#' @param path Path to the ZOnar csv files
#' @return shiny app
#' @import shiny
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#' @examples
#' path='Z:/zonar_sven/zonar/data/csv_zonar'
#' dvm_app(path)
dvm_app <- function() {
'%ni%' <- Negate('%in%')
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
tabsetPanel(
tabPanel("Mission Settings",
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
hr()),
tabPanel('DVM settings',
sliderInput("Svrange", label = ("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',25),
radioButtons("updown", "Compute percentage from:",
c("Bottom" = "bottom",
"Surface" = "surface")),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3),
checkboxInput('freeze','Keep DVM',value = FALSE)),
tabPanel('Filter',
hr(),
h3('Running function'),
numericInput('xwin','Window size x',3),
numericInput('ywin','Window size y',3),
selectInput('func','Filter function',c('mean','median','max','min','sd','var')),
shiny::actionButton('addRun','Add'),
hr(),
h3('Anomality'),
selectInput('funcAn','Background FUnction', c('mean','median','max','min')),
radioButtons('rfscale','Scaled values', c('Normal','scaled')),
shiny::actionButton('addAn','Add'),
hr(),
textAreaInput("filterlist", "Filter list", "None"),
)
)),
mainPanel(
textInput("pathIn", "Path", "C:/Users/sven/Documents/Zonar/data/csv_zonar/"),#"Z:\\zonar_sven\\zonar\\data\\csv_zonar\\"),
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(session, input, output) {
#filter buttons
observeEvent(input$addRun, {
task = paste0("filter2d(Svval, x=",input$xwin,", y=",input$ywin,
", xval='Dive',yval='Depth_r', val='Sv', log=TRUE,fun='",input$func,"')")
if(input$filterlist %ni% c('None','') ){
task = paste(input$filterlist,task, sep=';\n')
}
updateTextAreaInput(session, "filterlist", value = task)
})
observeEvent(input$addAn, {
v=if(input$rfscale == 'Normal'){'SvAnomal'}else{'scaledAnomaly'}
task = paste0("anomaly(Svval, fun='",input$funcAn,"', replace=TRUE,v='", v,"')") #Svval$Sv = Svval[,'",v,"']")
if(input$filterlist %ni% c('None','') ){
task = paste(input$filterlist,task, sep=';\n')
}
updateTextAreaInput(session, "filterlist", value = task)
})
#process Sv
sv_proc <- reactive({
Sv = get_sv(input$pathIn,input$miss)
Svval = Sv$data[input$svvar][[1]]
if (input$filterlist %ni% c('None','') ){
funs = strsplit(input$filterlist,';\n')
for(f in funs[[1]]){
print(f)
Svval = eval(parse(text=f))
}
}
updateSliderInput(session, "Svrange", #value = c(floor(min(na.omit(Svval$Sv))),ceiling(max(na.omit(Svval$Sv)))),
min = floor(min(na.omit(Svval$Sv))),
max = ceiling(max(na.omit(Svval$Sv))),
step = 0.1)
return(list(Svval, Sv$gps))
})
#get dvm
dvm <- reactive({
if (input$freeze==FALSE){
Svval=sv_proc()[[1]]
dvmdat <<- pdvm(ac_group=Svval,
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend),
updown=input$updown)
}
return(list(dvmdat))
})
output$svplot <- renderPlot({
sv = sv_proc()
Sv = sv[[1]]
gps = sv[[2]]
if(input$freeze==FALSE){dvm = dvmdat}
#print(Sv[[1]])
p=plot_sv(Sv,gps,svmin=input$Svrange[1], svmax=input$Svrange[2], variable='Sv')
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
#dvmdat = dvmdat
ggplot(data=dvmdat, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
})
}
dvm_app()
library(ZooScatR)
config <- 'C:\\Users\\sven\\Documents\\pablo\\config_salp_2.dat'
ZooScatR::DWBAapp()
devtools::install_github('SvenGastauer/ZooScatR_extended')
library(zsext)
?ZooScatR
config <- 'C:\\Users\\sven\\Documents\\pablo\\config_salp_2.dat'
para = read_para(fname)
para = read_para(config)
misc <- list(cw=1500)
res<- bscat(para=para,misc=misc)
zsext::plot_3D(para)
para
read_para(config)
misc <- list(cw=1500)
read_para(config)
#config <- 'C:\\Users\\sven\\Documents\\pablo\\config_salp_2.dat'
config = paste0(system.file(package="ZooScatR"),"/extdata/configs/config_0.dat") #Loacation of the parameters file
para = read_para(config)
para
misc <- list(cw=1500)
res<- bscat(para=para,misc=misc)
zsext::plot_3D(para)
ZooScatR::DWBAapp()
#let's assum g = 1.0352
#h = 1.05891
config <- 'C:\\Users\\sven\\Documents\\pablo\\config_salp_3.dat' #the one you provided was empty, so I created a similar one...
#config = paste0(system.file(package="ZooScatR"),"/extdata/configs/config_0.dat") #Loacation of the parameters file
para = read_para(config)
para
misc <- list(cw=1500)
res<- bscat(para=para,misc=misc)
zsext::plot_3D(para)
library(ZooScatR)
#install ZooScatR extended
devtools::install_github('SvenGastauer/ZooScatR_extended')
library(zsext)
ZooScatR::buildpos(config)
para = ZooScatR::read_para(config)
ZooScatR::buildpos(para)
shape=ZooScatR::buildpos(para)
shape
shape=ZooScatR::buildpos(para)
shape$plot
zsext::plot_3D(para)
para2 = para
para2$shape$L = 45
zsext::plot_3D(para2)
zsext::plot_3D(para)
TS_shape2<- bscat(para=para,misc=misc)
TS_shape1
TS_shape1<- bscat(para=para,misc=misc)
TS_shape2<- bscat(para=para2,misc=misc)
TS_shape1$rplot
para$simu$var0
para$simu$var1 = 400
para$simu$var0 = 18
para2 = para
para2$shape$L_a = 10
para2$shape$L = 45
TS_shape1<- bscat(para=para,misc=misc)
TS_shape2<- bscat(para=para2,misc=misc)
TS_shape1$rplot
ZooScatR::DWBAapp()
201-139
264-201
325-264
misc
d = c/(2*df*1000)
c=misc$cw
df = 62
d = c/(2*df*1000)
d
50/8
df = 61
d = c/(2*df*1000)
d
df = 63
d = c/(2*df*1000)
d
library(ZooScatR)
#install ZooScatR extended
#devtools::install_github('SvenGastauer/ZooScatR_extended')
library(zsext)
c=misc$cw
d = c/(2*df*1000)
d
round(d,4)
round(d*1000/2)
para$shape$L_a
para$shape$L / para$shape$L_a
df = 62
d = c/(2*df*1000)
d
In the given example out $\Delta_f$ is approximately 61 kHz:
df = 61
d = c/(2*df*1000)
d
df = 61.5
d = c/(2*df*1000)
d
df = 61.
d = c/(2*df*1000)
d
df = 61.5
d = c/(2*df*1000)
d
para$shape$L / para$shape$L_a
TS_shape1$y
TS = TS_shape1$y - TS_shape2$y
TS = data.frame(TS=TS_shape1$y - TS_shape2$y)
TS_shape1$y
TS_shape1$var
TS = data.frame(TS=10*log10(10^(TS_shape1$y/10) - 10^(TS_shape2$y/10)))
TS
10^(TS_shape1$y/10)
10^(TS_shape1$y/10) - 10^(TS_shape2$y/10)
10^(TS_shape2$y/10)
TS_shape1$rplot
TS_shape2$rplot
TS = data.frame(TS=10*log10((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))))
TS
((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))))
((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10)))
10^(TS_shape1$y/10)
10^(TS_shape2$y/10)
(10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))
log10((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))
)
10*log10((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10)))
TS = data.frame(TS=10*log10((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))))
TS
TS$Frequency = TS_shape1$var
library(ggplot2)
ggplot(data=TS,aes(x=Frequency, y=TS))+geom_point()
ggplot(data=TS,aes(x=Frequency, y=TS))+geom_line()
ggplot(data=TS,aes(x=Frequency, y=TS))+geom_path()
ggplot(data=TS,aes(x=Frequency, y=TS))+geom_point()
TS$shape2 <- TS_shape2$y
TS$shape1 <- TS_shape1$y
TS$Frequency = TS_shape1$var
TS = data.frame(TS=10*log10((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))))
library(reshape2)
melt(TS,id.var='Frequency')
melt(TS,id.var=Frequency)
head(TS)
TS = data.frame(TS=10*log10((10^(TS_shape1$y/10) - 10^(TS_shape2$y/10))))
TS$Frequency = TS_shape1$var
TS$shape1 <- TS_shape1$y
TS$shape2 <- TS_shape2$y
head(TS)
melt(TS,id.var=Frequency)
melt(TS,id.var='Frequency' )
df = melt(TS,id.var='Frequency' )
head(df)
ggplot(data=df,aes(x=Frequency, y=value, group=variable))+geom_line()
ggplot(data=df,aes(x=Frequency, y=value, group=variable, col=variable))+geom_line(size=2)

mission = get_mission(ncpath, ending='*.nc', patterns=NULL)[mission]
}
message(Sys.time(),': Selected mission - ',mission)
fn = list.files(path=ncpath,'*.nc', full.names = TRUE)
nc_data <- ncdf4::nc_open(fn)
message(Sys.time(),': Getting GPS')
t_end <- ncvar_get(nc_data, "gps/UTC_time_fix_end")
ori = strsplit(ncatt_get(nc_data, "gps/UTC_time_fix_end")$units,'seconds since ')[[1]][2]
t_end = as.POSIXct(t_end,origin=ori)
attr(t_end,'tzone') = 'UTC'
t_start <- ncvar_get(nc_data, "gps/UTC_time_fix_start")
ori = strsplit(ncatt_get(nc_data, "gps/UTC_time_fix_start")$units,'seconds since ')[[1]][2]
t_start = as.POSIXct(t_start,origin=ori)
attr(t_start,'tzone') = 'UTC'
lon_start <- ncvar_get(nc_data, "gps/lon_start")
lon_end <- ncvar_get(nc_data, "gps/lon_end")
lat_start <- ncvar_get(nc_data, "gps/lat_start")
lat_end <- ncvar_get(nc_data, "gps/lat_end")
gps =data.frame(Time_start =t_start,
Time_end = t_end,
Lon_start = lon_start,
Lon_end = lon_end,
Lat_start = lat_start,
Lat_end = lat_end)
gps <- gps %>%
gather(Lon_v, Lon, c(Lon_start,Lon_end))%>%
gather(Lat_v, Lat, c(Lat_start,Lat_end))%>%
gather(Time_v, Time, c(Time_start,Time_end))
message(Sys.time(),': Getting sun position/azimuth and Day/Night info')
sr <- do.call(rbind,apply(as.matrix(1:length(gps$Time)), 1, function(x)
getSunlightPosition(gps$Time[x], gps$Lat[x], gps$Lon[x])))
gps$alt <- sr$altitude * 180 / pi
gps$azimuth <- sr$azimuth * 180 / pi
gps$sun <- cut(gps$alt,
breaks=c(-Inf, -12, 0, Inf),
labels=c("Night","Dusk/Dawn","Day"))
gps$Lon_v[gps$Lon_v=='Lon_end'] <- 'end'
gps$Lon_v[gps$Lon_v=='Lon_start'] <- 'start'
gps$var = gps$Lon_v
gps <- gps[!(names(gps) %in% c('Lon_v','Lat_v','Time_v'))]
gps$mission = mission
return(gps)
}
#' Plot mission map with bathymetry
#' @param gps dataframe contianing grps information, generated by get_gps
#' @param bathy TRUE/FALSE to add bathymetry from marmap package or not, defaults to TRUE
#' @param daynight TRUE/FALSE color code points by day, night or dusk/dawn, defaults to TRUE
#' @param startend TRUE/FALSE shape points for start and end points of dive, defaults to TRUE
#' @return ggplot
#' @import marmap
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#'
plot_gps <- function(gps, bathy=TRUE, daynight=TRUE, startend=TRUE){
library(marmap)
if (bathy){
miss.bath <- getNOAA.bathy(lon1 = floor(min(gps$Lon)), lon2 = ceiling(max(gps$Lon)),
lat1 = floor(min(gps$Lat)), lat2 = ceiling(max(gps$Lat)))
p <- autoplot(miss.bath, geom = c("raster","contour"), colour = "white", interpolate=TRUE) +
scale_fill_gradientn(name='',
values = scales::rescale(c(min(fortify.bathy(miss.bath)$z),
-.1, 0, max(fortify.bathy(miss.bath)$z))),
colors = c("steelblue4", "#C7E0FF", "grey50", "grey80"))+
geom_line(data=gps,aes(x=Lon, y=Lat),col='gray')+
ylab('Latitude')+xlab('Longitude')+
theme_classic()+
theme(text=element_text(size=16),
axis.text.x=element_text(angle=75,hjust=0, vjust=0),
legend.text = element_text(size=10))
}else{
p <- ggplot()+geom_line(data=gps,aes(x=Lon, y=Lat),col='gray')+
scale_x_continuous(limits=c(min(gps$Lon)-0.1, max(gps$Lon)+0.1))+
scale_y_continuous(limits=c(min(gps$Lat)-0.1, max(gps$Lat)+0.1), expand=c(0,0))+
ylab('Latitude')+xlab('Longitude')+
theme_classic()+
theme(text=element_text(size=16),
axis.text.x=element_text(angle=75,hjust=0, vjust=0),
legend.text = element_text(size=10))
}
if (daynight & startend)(p <- p + geom_point(data=gps,aes(x=Lon, y=Lat, col=sun, shape=var), size=0.9))
if (daynight & !startend)(p <- p + geom_point(data=gps,aes(x=Lon, y=Lat, col=sun), size=0.9))
if (!daynight & startend)(p <- p + geom_point(data=gps,aes(x=Lon, y=Lat, shape=var), size=0.9))
if (daynight){p<-p + scale_color_manual(values=c('black','lightgray', 'yellow'), name='')}
if(startend){p<-p+scale_shape_manual(values=c(4,19), name='')}
return(p)
}
#' Gets the standard nc path from a given csv path
#' @description  This assumes that the standard file structure is kept intact
#' @param csvpath path to the ZOnar csv files
#' @export
#' @author Sven Gastauer
#' @return path to nc files
ncpath_from_csvpath <-function(csvpath){
file.path(dirname(csvpath),"nc_zonar/")
}
#' Shiny App to detect DVM
#' @param path Path to the ZOnar csv files
#' @return shiny app
#' @import shiny
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#' @examples
#' path='Z:/zonar_sven/zonar/data/csv_zonar'
#' dvm_app(path)
dvm_app <- function(path) {
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
sliderInput("Svrange", label = h3("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',82),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3)),
mainPanel(
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(input, output) {
dvm <- reactive({
Sv = get_sv(path,input$miss)
dvm = pdvm(ac_group=Sv$data[input$svvar][[1]],
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend))
return(list(Sv,dvm))
})
output$svplot <- renderPlot({
Sv=dvm()[[1]]
#print(Sv[[1]])
p=Sv$plots[input$svvar][[1]]
dvm = dvm()[[2]]
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvm = dvm()[[2]]
ggplot(data=dvm, aes(x=sun,y=Depth_r,svmin=input$Svrange[1], svmax=input$Svrange[2]))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
}
)
}
dvm_app(path)
library(ZooDVM)
dvm_app(path)
path = 'C:\\Users\\sven\\Documents\\Zonar\\data\\csv_zonar\\'
mm = get_mission(path)
ncpath = ncpath_from_csvpath(path)
sel = 15 #selected mission
gps = get_gps(ncpath, mission=sel)
Sv = get_sv(path,sel)
Sv$plots$`1000kHz`
plot_sv(Sv$data$`1000kHz`,cmaps="RdBu", smin=-65)
plot_sv(Sv$data$`1000kHz`,cmaps="RdBu", svmin=-65)
plot_sv(Sv$data$`1000kHz`,cmaps="RdBu", svmax=-65)
plot_sv(Sv$data$`1000kHz`,cmaps="RdBu", svmax=-65, svmin=-90)
plot_sv(Sv$data$`1000kHz`,cmaps="RdYlBu", svmax=-65, svmin=-90)
plot_sv(Sv$data$`1000kHz`,cmaps="RdYlBu", svmax=-25, svmin=-90)
plot_sv(Sv$data$`1000kHz`,cmaps="RdYlBu", svmax=-55, svmin=-90)
plot_sv(Sv$data$`1000kHz`,cmaps="RdBu", svmax=-55, svmin=-80)
ggplot(data=dvm, aes(x=sun,y=Depth_r,svmin=input$Svrange[1], svmax=input$Svrange[2]))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
dvm_app(path)
#' Shiny App to detect DVM
#' @param path Path to the ZOnar csv files
#' @return shiny app
#' @import shiny
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#' @examples
#' path='Z:/zonar_sven/zonar/data/csv_zonar'
#' dvm_app(path)
dvm_app <- function(path) {
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
sliderInput("Svrange", label = h3("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',82),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3)),
mainPanel(
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(input, output) {
dvm <- reactive({
Sv = get_sv(path,input$miss)
dvm = pdvm(ac_group=Sv$data[input$svvar][[1]],
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend))
return(list(Sv,dvm))
})
output$svplot <- renderPlot({
Sv=dvm()[[1]]
#print(Sv[[1]])
p=sv_plot(Sv$data[input$svvar][[1]],Sv$gps,svmin=input$Svrange[1], svmax=input$Svrange[2])
dvm = dvm()[[2]]
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvm = dvm()[[2]]
ggplot(data=dvm, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
}
)
}
dvm_app <- function(path) {
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
sliderInput("Svrange", label = h3("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',82),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3)),
mainPanel(
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(input, output) {
dvm <- reactive({
Sv = get_sv(path,input$miss)
dvm = pdvm(ac_group=Sv$data[input$svvar][[1]],
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend))
return(list(Sv,dvm))
})
output$svplot <- renderPlot({
Sv=dvm()[[1]]
#print(Sv[[1]])
p=sv_plot(Sv$data[input$svvar][[1]],Sv$gps,svmin=input$Svrange[1], svmax=input$Svrange[2])
dvm = dvm()[[2]]
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvm = dvm()[[2]]
ggplot(data=dvm, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
}
)
}
#' Shiny App to detect DVM
#' @param path Path to the ZOnar csv files
#' @return shiny app
#' @import shiny
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#' @examples
#' path='Z:/zonar_sven/zonar/data/csv_zonar'
#' dvm_app(path)
dvm_app <- function(path) {
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
sliderInput("Svrange", label = h3("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',82),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3)),
mainPanel(
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(input, output) {
dvm <- reactive({
Sv = get_sv(path,input$miss)
dvm = pdvm(ac_group=Sv$data[input$svvar][[1]],
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend))
return(list(Sv,dvm))
})
output$svplot <- renderPlot({
Sv=dvm()[[1]]
#print(Sv[[1]])
p=sv_plot(Sv$data[input$svvar][[1]],Sv$gps,svmin=input$Svrange[1], svmax=input$Svrange[2])
dvm = dvm()[[2]]
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvm = dvm()[[2]]
ggplot(data=dvm, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
}
)
}
dvm_app(path)
library(ZooDVM)
#' Shiny App to detect DVM
#' @param path Path to the ZOnar csv files
#' @return shiny app
#' @import shiny
#' @import ggplot2
#' @export
#' @author Sven Gastauer
#' @examples
#' path='Z:/zonar_sven/zonar/data/csv_zonar'
#' dvm_app(path)
dvm_app <- function(path) {
require(shiny)
shinyApp(
ui = fluidPage(
sidebarLayout(
sidebarPanel(
selectInput('miss','Select mission',mm$missions),
selectInput('svvar','Sv variable',names(Sv$data)),
sliderInput("Svrange", label = h3("Sv Range"), min = -95, max = -20, value = c(-85, -45)),
numericInput('perc','Percentage',82),
numericInput('dcut','Depth cut',300),
numericInput('scut','Surface cut',10),
numericInput('dskip','# Dives to Skip',3),
numericInput('dend','# Dives to ignore from end',3)),
mainPanel(
plotOutput("svplot"),
plotOutput("dplot"))
)),
server = function(input, output) {
dvm <- reactive({
Sv = get_sv(path,input$miss)
dvm = pdvm(ac_group=Sv$data[input$svvar][[1]],
vmin=as.numeric(input$Svrange[1]),
vmax=as.numeric(input$Svrange[2]),
perc=as.numeric(input$perc),
dcut=as.numeric(input$dcut),
scut=as.numeric(input$scut),
dskip=as.numeric(input$dskip),
dend=as.numeric(input$dend))
return(list(Sv,dvm))
})
output$svplot <- renderPlot({
Sv=dvm()[[1]]
#print(Sv[[1]])
p=plot_sv(Sv$data[input$svvar][[1]],Sv$gps,svmin=input$Svrange[1], svmax=input$Svrange[2])
dvm = dvm()[[2]]
p<-p+geom_line(data=dvm, aes(x=Dive, y=Depth),size=1)
p
})
output$dplot <- renderPlot({
dvm = dvm()[[2]]
ggplot(data=dvm, aes(x=sun,y=Depth_r))+
xlab('Dive #')+ylab('Depth [m]')+
geom_point()+theme_classic()+
theme(text=element_text(size=16))
})
}
)
}
dvm_app(path)
ncpath
ncpath
mission=15
if (is.numeric(mission)){
mission = get_mission(ncpath, ending='*.nc', patterns=NULL)[mission]
}
message(Sys.time(),': Selected mission - ',mission)
fn = list.files(path=ncpath,'*.nc', full.names = TRUE)
nc_data <- ncdf4::nc_open(fn)
nc_data
tmp <- ncvar_get(nc_data, "Environment/temperature")
tmp
image(tmp)
dep <- ncvar_get(nc_data, "Environment/Depth")
dive <- ncvar_get(nc_data, "Environment/Dive")
image(dive,dep,tmp)
levelplot(tmp)
lattice::levelplot(tmp)
lattice::levelplot(dive,dep,tmp)
resahpe2::melt(tmp)
reshape2::melt(tmp)
temp <- reshape2::melt(tmp)
dive[temp$Var1]
temp$Depth <- dep[temp$Var2]
head(tmp)
temp <- reshape2::melt(tmp)
temp$Dive <- dive[temp$Var1]
temp$Depth <- dep[temp$Var2]
head(temp)
temp[!is.nan(temp$value),]
temp <-temp[!is.nan(temp$value),]
head(temp)
ggplot(data=temp,aes(x=Dive, y=Depth, fill=value))+geom_tile()
temp$Depth_r <- round(temp$Depth/5)*5
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+geom_tile()
temp$Depth_r <- round(temp$Depth/1)*1
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+geom_tile()
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()+
scale_fill_distiller(palette = cmap, na.value = 'transparent',
limits=lims,
name=paste('Sv',unique(d1$variable)), oob=scales::squish)+
scale_x_continuous(expand=c(0.01,0.01))+
xlab('Dive #') + ylab('Depth [m]')+
theme_classic()+
theme(text=element_text(size=16),
legend.position = 'top')
cmap='RdYlBu'
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()+
scale_fill_distiller(palette = cmap, na.value = 'transparent',
limits=lims,
name=paste('Sv',unique(d1$variable)), oob=scales::squish)+
scale_x_continuous(expand=c(0.01,0.01))+
xlab('Dive #') + ylab('Depth [m]')+
theme_classic()+
theme(text=element_text(size=16),
legend.position = 'top')
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()+
scale_fill_distiller(palette = cmap, na.value = 'transparent',
limits=lims,
name='Temperature', oob=scales::squish)+
scale_x_continuous(expand=c(0.01,0.01))+
xlab('Dive #') + ylab('Depth [m]')+
theme_classic()+
theme(text=element_text(size=16),
legend.position = 'top')
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()+
scale_fill_distiller(palette = cmap, na.value = 'transparent',
limits=lims,
name='Temperature', oob=scales::squish)
cmap='RdYlBu'
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()
lims=c(8,17)
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()+
scale_fill_distiller(palette = cmap, na.value = 'transparent',
limits=lims,
name='Temperature', oob=scales::squish)+
scale_x_continuous(expand=c(0.01,0.01))+
xlab('Dive #') + ylab('Depth [m]')+
theme_classic()+
theme(text=element_text(size=16),
legend.position = 'top')
ggplot(data=temp,aes(x=Dive, y=Depth_r, fill=value))+
geom_tile()+
scale_y_reverse()+
scale_fill_distiller(palette = cmap, na.value = 'transparent',
limits=lims,
name='Temperature', oob=scales::squish)+
scale_x_continuous(expand=c(0.01,0.01))+
xlab('Dive #') + ylab('Depth [m]')+
theme_classic()+
theme(text=element_text(size=16),
legend.position = 'top',
legend.text = element_text(size=10))
